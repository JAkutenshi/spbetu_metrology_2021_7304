
;; Function swap (swap, funcdef_no=5, decl_uid=3054, cgraph_uid=5, symbol_order=5)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
swap (double * p, double * q)
{
  double hold;

  <bb 2> [0.00%]:
  hold = *p;
  _1 = *q;
  *p = _1;
  *q = hold;
  return;

}



;; Function sort (sort, funcdef_no=6, decl_uid=3059, cgraph_uid=6, symbol_order=6)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10
;;
;; Loop 1
;;  header 3, latch 8
;;  depth 1, outer 0
;;  nodes: 3 8 7 6 4 5
;;
;; Loop 2
;;  header 7, latch 6
;;  depth 2, outer 1
;;  nodes: 7 6 4 5
;; 2 succs { 3 }
;; 3 succs { 7 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 }
;; 7 succs { 4 8 }
;; 8 succs { 3 9 }
;; 9 succs { 10 }
;; 10 succs { 1 }
sort (double * a, int n)
{
  int j;
  char no_change;
  double * result;
  double * D.3088;

  <bb 2> [0.00%]:
  _1 = (long unsigned int) n;
  _2 = _1 * 8;
  result = malloc (_2);
  _3 = (long unsigned int) n;
  _4 = _3 * 8;
  memcpy (result, a, _4);

  <bb 3> [0.00%]:
  no_change = 1;
  j = 0;
  goto <bb 7>; [0.00%]

  <bb 4> [0.00%]:
  _5 = (long unsigned int) j;
  _6 = _5 * 8;
  _7 = result + _6;
  _8 = *_7;
  _9 = (sizetype) j;
  _10 = _9 + 1;
  _11 = _10 * 8;
  _12 = result + _11;
  _13 = *_12;
  if (_8 > _13)
    goto <bb 5>; [0.00%]
  else
    goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  _14 = (sizetype) j;
  _15 = _14 + 1;
  _16 = _15 * 8;
  _17 = result + _16;
  _18 = (long unsigned int) j;
  _19 = _18 * 8;
  _20 = result + _19;
  swap (_20, _17);
  no_change = 0;

  <bb 6> [0.00%]:
  j = j + 1;

  <bb 7> [0.00%]:
  _21 = n + -1;
  if (j < _21)
    goto <bb 4>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  if (no_change == 0)
    goto <bb 3>; [0.00%]
  else
    goto <bb 9>; [0.00%]

  <bb 9> [0.00%]:
  D.3088 = result;

<L7> [0.00%]:
  return D.3088;

}



;; Function write_arr (write_arr, funcdef_no=7, decl_uid=3071, cgraph_uid=7, symbol_order=7)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
write_arr (double * a, int n)
{
  int i;

  <bb 2> [0.00%]:
  __builtin_putchar (10);
  i = 0;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _1 = (long unsigned int) i;
  _2 = _1 * 8;
  _3 = a + _2;
  _4 = *_3;
  printf ("%7.1f ", _4);
  i = i + 1;

  <bb 4> [0.00%]:
  if (i < n)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  __builtin_putchar (10);
  return;

}



;; Function main (main, funcdef_no=8, decl_uid=3077, cgraph_uid=8, symbol_order=8)

Removing basic block 7
Merging blocks 5 and 6
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 6 }
;; 6 succs { 1 }
main ()
{
  int i;
  double x[80];
  int n;
  int D.3090;

  <bb 2> [0.00%]:
  n = 80;
  _1 = time (0B);
  _2 = (unsigned int) _1;
  srand (_2);
  i = 0;
  goto <bb 4>; [0.00%]

  <bb 3> [0.00%]:
  _3 = rand ();
  _4 = _3 % 100;
  _5 = (double) _4;
  x[i] = _5;
  i = i + 1;

  <bb 4> [0.00%]:
  if (i < n)
    goto <bb 3>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 5> [0.00%]:
  sort (&x, n);
  D.3090 = 0;
  x = {CLOBBER};

<L4> [0.00%]:
  return D.3090;

}


